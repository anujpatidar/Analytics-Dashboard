service: shopify-analytics-dashboard

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    SHOPIFY_API_KEY: ${env:SHOPIFY_API_KEY}
    SHOPIFY_API_SECRET: ${env:SHOPIFY_API_SECRET}
    SHOPIFY_STORE_URL: ${env:SHOPIFY_STORE_URL}
    ORDERS_TABLE: ShopifyOrders-${self:provider.stage}
    PRODUCTS_TABLE: ShopifyProducts-${self:provider.stage}
    CUSTOMERS_TABLE: ShopifyCustomers-${self:provider.stage}
    SYNC_METADATA_TABLE: ShopifySyncMetadata-${self:provider.stage}
    CORS_ORIGIN: ${env:CORS_ORIGIN, '*'}
    LOW_STOCK_THRESHOLD: ${env:LOW_STOCK_THRESHOLD, '5'}
    USE_SAMPLE_DATA: ${env:USE_SAMPLE_DATA, 'false'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/Shopify*-${self:provider.stage}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/Shopify*-${self:provider.stage}/index/*"

functions:
  api:
    handler: apiLambda.handler
    events:
      - http:
          path: /{proxy+}
          method: any
          cors: true
    environment:
      NODE_ENV: ${self:provider.stage}

  syncShopifyData:
    handler: shopifySync.handler
    events:
      - schedule: rate(30 minutes)
    timeout: 900
    memorySize: 1024
    environment:
      NODE_ENV: ${self:provider.stage}

resources:
  Resources:
    ShopifyOrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ORDERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: DateIndex
            KeySchema:
              - AttributeName: date
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    ShopifyProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    
    ShopifyCustomersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CUSTOMERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    ShopifySyncMetadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SYNC_METADATA_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: syncId
            AttributeType: S
        KeySchema:
          - AttributeName: syncId
            KeyType: HASH

plugins:
  - serverless-offline
  - serverless-dotenv-plugin 